"use client";

import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import Image from "next/image";
import { UserX, Scale, Users } from "lucide-react";

const SLIDES = [
  {
    key: "individual",
    icon: <UserX className="w-6 h-6 text-red-600" />,
    title: "Tuy·ªát ƒë·ªëi h√≥a c√° nh√¢n",
    subtitle: "L·ªách v·ªÅ ‚Äút·ª± do tuy·ªát ƒë·ªëi‚Äù",
    color: "#ef4444",
    image: "/lech-ca-nhan.png",
    points: [
      "ƒê·ªÅ cao t·ª± do c√° nh√¢n m·ªôt c√°ch c·ª±c ƒëoan, xem nh·∫π k·ª∑ lu·∫≠t ‚Äì k·ª∑ c∆∞∆°ng ‚Äì ph√°p lu·∫≠t, d·∫´n ƒë·∫øn r·ªëi lo·∫°n tr·∫≠t t·ª± v√† x√¢m ph·∫°m quy·ªÅn, l·ª£i √≠ch h·ª£p ph√°p c·ªßa ng∆∞·ªùi kh√°c.",
      "L·ª£i d·ª•ng danh nghƒ©a ‚Äút·ª± do ng√¥n lu·∫≠n‚Äù ƒë·ªÉ b√¥i nh·ªç, xuy√™n t·∫°c, ph√°t t√°n th√¥ng tin sai l·ªách, g√¢y t·ªïn h·∫°i ƒë·∫øn l·ª£i √≠ch chung v√† ni·ªÅm tin x√£ h·ªôi.",
      "ƒêi ng∆∞·ª£c l·∫°i nguy√™n t·∫Øc h√†i h√≤a l·ª£i √≠ch gi·ªØa c√° nh√¢n ‚Äì t·∫≠p th·ªÉ ‚Äì to√†n x√£ h·ªôi m√† d√¢n ch·ªß x√£ h·ªôi ch·ªß nghƒ©a h∆∞·ªõng t·ªõi.",
    ],
    balanceTips: [
      "T√¥n tr·ªçng ph√°p lu·∫≠t v√† chu·∫©n m·ª±c x√£ h·ªôi.",
      "Ph√™ b√¨nh h√†nh vi thay v√¨ c√¥ng k√≠ch c√° nh√¢n.",
      "Ki·ªÉm ch·ª©ng th√¥ng tin tr∆∞·ªõc khi chia s·∫ª, tr√°nh lan truy·ªÅn sai l·ªách.",
    ],
  },
  {
    key: "harmony",
    icon: <Scale className="w-6 h-6 text-yellow-500" />,
    title: "H√†i h√≤a quy·ªÅn & l·ª£i √≠ch",
    subtitle: "Tr·∫°ng th√°i l√Ω t∆∞·ªüng",
    color: "#facc15",
    image: "/hai-hoa.png",
    points: [
      "T·ª± do c√° nh√¢n ƒë∆∞·ª£c b·∫£o v·ªá trong khu√¥n kh·ªï ph√°p lu·∫≠t, lu√¥n g·∫Øn v·ªõi tr√°ch nhi·ªám x√£ h·ªôi.",
      "K·∫øt h·ª£p h√†i h√≤a l·ª£i √≠ch c√° nh√¢n ‚Äì t·∫≠p th·ªÉ ‚Äì to√†n x√£ h·ªôi; khuy·∫øn kh√≠ch s√°ng t·∫°o, ph√°t huy t√≠nh t√≠ch c·ª±c c·ªßa m·ªói ng∆∞·ªùi.",
      "Ph√°p lu·∫≠t ph√¢n ƒë·ªãnh r√µ quy·ªÅn v√† nghƒ©a v·ª•, ƒë·∫£m b·∫£o tr·∫≠t t·ª±, c√¥ng b·∫±ng v√† ·ªïn ƒë·ªãnh x√£ h·ªôi.",
      "C·ªông ƒë·ªìng ƒë∆∞·ª£c h∆∞·ªüng l·ª£i: l√≤ng tin x√£ h·ªôi ƒë∆∞·ª£c c·ªßng c·ªë, ƒë·ªëi tho·∫°i x√¢y d·ª±ng, m√¥i tr∆∞·ªùng an to√†n v√† c√¥ng b·∫±ng.",
    ],
    balanceTips: [
      "üí° ƒê√¢y l√† tr·∫°ng th√°i l√Ω t∆∞·ªüng c·ªßa d√¢n ch·ªß x√£ h·ªôi ch·ªß nghƒ©a:",
      "‚ÄúT·ª± do ph·∫£i g·∫Øn v·ªõi k·ª∑ lu·∫≠t, k·ª∑ c∆∞∆°ng v√† ƒë∆∞·ª£c ph√°p lu·∫≠t b·∫£o ƒë·∫£m.‚Äù",
    ],
  },
  {
    key: "collective",
    icon: <Users className="w-6 h-6 text-green-600" />,
    title: "Tuy·ªát ƒë·ªëi h√≥a t·∫≠p th·ªÉ",
    subtitle: "L·ªách v·ªÅ ‚Äúƒë·ªìng nh·∫•t h√≥a‚Äù",
    color: "#22c55e",
    image: "/lech-tap-the.png",
    points: [
      "Qu√° ƒë·ªÅ cao l·ª£i √≠ch chung, lu m·ªù nhu c·∫ßu v√† ti·∫øng n√≥i c·ªßa c√° nh√¢n, d·ªÖ d·∫´n ƒë·∫øn √°p ƒë·∫∑t ‚Äúƒë·ªìng thu·∫≠n‚Äù h√¨nh th·ª©c.",
      "L√†m gi·∫£m s√°ng t·∫°o, m·∫•t ƒë·ªông l·ª±c ph√°t tri·ªÉn; d·ªÖ ph√°t sinh t√¨nh tr·∫°ng l·∫°m quy·ªÅn, quan li√™u, h√¨nh th·ª©c ch·ªß nghƒ©a.",
      "L√†m y·∫øu ƒëi c∆° ch·∫ø gi√°m s√°t v√† ph·∫£n bi·ªán x√£ h·ªôi, khi·∫øn sai ph·∫°m kh√≥ ƒë∆∞·ª£c ph√°t hi·ªán v√† kh·∫Øc ph·ª•c k·ªãp th·ªùi.",
    ],
    balanceTips: [
      "T√¥n tr·ªçng v√† b·∫£o v·ªá quy·ªÅn con ng∆∞·ªùi, quy·ªÅn thi·ªÉu s·ªë.",
      "TƒÉng c∆∞·ªùng ph·∫£n bi·ªán x√£ h·ªôi, minh b·∫°ch v√† tr√°ch nhi·ªám gi·∫£i tr√¨nh.",
      "Th·ª±c thi ph√°p lu·∫≠t nghi√™m minh, b·∫£o ƒë·∫£m m·ªçi c√° nh√¢n v√† t·ªï ch·ª©c ƒë·ªÅu b√¨nh ƒë·∫≥ng tr∆∞·ªõc ph√°p lu·∫≠t.",
    ],
  },
];

export default function Section3Balance() {
  const [value, setValue] = useState(50);

  const snapToClosest = (v: number) => {
    if (v < 20) return 0;
    if (v > 80) return 100;
    return 50;
  };

  const getIndex = (v: number) => (v === 0 ? 0 : v === 100 ? 2 : 1);
  const index = getIndex(value);
  const slide = SLIDES[index];

  const getGradient = (v: number) => {
    const gray = "#e5e7eb";
    const red = "#ef4444";
    const green = "#22c55e";

    if (v === 50) {
      return `linear-gradient(90deg, ${gray} 0%, ${gray} 100%)`;
    }

    if (v < 50) {
      return `linear-gradient(
        90deg,
        ${gray} 0%,
        ${gray} ${v}%,
        ${red} ${v}%,
        ${red} 50%,
        ${gray} 50%,
        ${gray} 100%
      )`;
    }

    return `linear-gradient(
      90deg,
      ${gray} 0%,
      ${gray} 50%,
      ${green} 50%,
      ${green} ${v}%,
      ${gray} ${v}%,
      ${gray} 100%
    )`;
  };

  const handleRelease = (e: React.MouseEvent | React.TouchEvent) => {
    const input = e.target as HTMLInputElement;
    const snapped = snapToClosest(Number(input.value));
    setValue(snapped);
  };

  return (
    <section
      id="can-bang-quyen-loi-ich"
      className="relative w-full py-12 px-6 bg-beige-light text-gray-800"
    >
      <div className="max-w-7xl mx-auto flex flex-col items-center gap-2">
        <div className="text-center w-full">
          <h2 className="text-4xl md:text-5xl font-bold mb-4 ">
            C√¢n b·∫±ng gi·ªØa quy·ªÅn t·ª± do c√° nh√¢n v√† l·ª£i √≠ch c·ªông ƒë·ªìng
          </h2>
          <p className="max-w-5xl mx-auto text-gray-600">
            K√©o thanh tr∆∞·ª£t ƒë·ªÉ kh√°m ph√° ba tr·∫°ng th√°i: khi c√° nh√¢n b·ªã tuy·ªát ƒë·ªëi
            h√≥a, khi ƒë·∫°t s·ª± h√†i h√≤a, v√† khi t·∫≠p th·ªÉ b·ªã tuy·ªát ƒë·ªëi h√≥a.
          </p>
        </div>

        <div className="relative w-full max-w-4xl flex flex-col items-center mt-4 mb-8">
          <input
            type="range"
            min="0"
            max="100"
            placeholder="50"
            step="1"
            value={value}
            onChange={(e) => setValue(Number(e.currentTarget.value))}
            onMouseUp={handleRelease}
            onTouchEnd={handleRelease}
            className="w-full h-2 appearance-none rounded-full outline-none cursor-pointer"
            style={{
              background: getGradient(value),
              transition: "background 0.35s ease-in-out, all 0.3s ease",
            }}
          />

          <style jsx>{`
            input[type="range"] {
              transition: all 0.35s ease-in-out;
            }
            input[type="range"]::-webkit-slider-thumb {
              -webkit-appearance: none;
              appearance: none;
              width: 24px;
              height: 24px;
              background-color: ${slide.color};
              border-radius: 50%;
              border: 3px solid white;
              box-shadow: 0 0 10px ${slide.color}60,
                0 0 4px ${slide.color}40 inset;
              transition: all 0.3s ease-in-out;
            }
            input[type="range"]::-webkit-slider-thumb:hover {
              transform: scale(1.2);
              box-shadow: 0 0 16px ${slide.color}80;
            }
            input[type="range"]::-webkit-slider-thumb:active {
              transform: scale(1.25);
              box-shadow: 0 0 20px ${slide.color}a0;
            }
            input[type="range"]::-moz-range-thumb {
              width: 24px;
              height: 24px;
              background-color: ${slide.color};
              border-radius: 50%;
              border: 3px solid white;
              box-shadow: 0 0 10px ${slide.color}60,
                0 0 4px ${slide.color}40 inset;
              transition: all 0.3s ease-in-out;
            }
            input[type="range"]::-moz-range-thumb:hover {
              transform: scale(1.2);
              box-shadow: 0 0 16px ${slide.color}80;
            }
            input[type="range"]::-moz-range-thumb:active {
              transform: scale(1.25);
              box-shadow: 0 0 20px ${slide.color}a0;
            }
          `}</style>

          <div className="flex justify-between text-sm text-gray-600 w-full mt-3 select-none">
            <span className="flex items-center gap-1 text-red-600">
              <UserX className="w-4 h-4" /> C√° nh√¢n
            </span>
            <span className="flex items-center gap-1 text-yellow-500">
              <Scale className="w-4 h-4" /> H√†i h√≤a
            </span>
            <span className="flex items-center gap-1 text-green-600">
              <Users className="w-4 h-4" /> T·∫≠p th·ªÉ
            </span>
          </div>
        </div>

        <div className="grid md:grid-cols-2 gap-10 items-stretch w-full">
          <AnimatePresence mode="wait">
            <motion.div
              key={slide.key}
              initial={{ opacity: 0, x: -40 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: 40 }}
              transition={{ duration: 0.5, ease: "easeInOut" }}
              className="flex flex-col justify-between h-full bg-white border border-gray-200 rounded-3xl p-8 shadow-[0_8px_25px_rgba(0,0,0,0.05)]"
            >
              <div className="flex-grow space-y-6">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-gray-100 rounded-full">
                    {slide.icon}
                  </div>
                  <h3 className="text-2xl md:text-3xl font-bold mb-1">
                    {slide.title}
                  </h3>
                </div>
                <p className="text-gray-600 italic font-medium">
                  {slide.subtitle}
                </p>
                <ul className="space-y-3 text-gray-800 leading-relaxed">
                  {slide.points.map((p, i) => (
                    <li
                      key={i}
                      className="relative pl-5 before:absolute before:left-0 before:top-2 before:w-2 before:h-2 before:rounded-full before:bg-red-500"
                    >
                      {p}
                    </li>
                  ))}
                </ul>
              </div>
              <div className="mt-6 p-4 bg-gradient-to-r from-red-50 to-orange-50 border border-red-100 rounded-xl">
                <h4 className="text-red-600 font-semibold mb-2">
                  C√°ch c√¢n b·∫±ng:
                </h4>
                <ul className="list-disc ml-5 space-y-1 text-gray-700">
                  {slide.balanceTips.map((tip, i) => (
                    <li key={i}>{tip}</li>
                  ))}
                </ul>
              </div>
            </motion.div>
          </AnimatePresence>

          <AnimatePresence mode="wait">
            <motion.div
              key={slide.image}
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.95 }}
              transition={{ duration: 0.5, ease: "easeInOut" }}
              className="flex h-full"
            >
              <div className="flex-grow overflow-hidden flex">
                <Image
                  src={slide.image}
                  alt={slide.title}
                  width={700}
                  height={500}
                  className="w-full h-full object-cover transition-transform duration-700 hover:scale-105"
                />
              </div>
            </motion.div>
          </AnimatePresence>
        </div>
      </div>
    </section>
  );
}
